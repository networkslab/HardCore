# import os

# #generate PS graphs
# home = '/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/'
# directory = '/lec_new_temp/'
# source_dir = '/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/split_0/'
# gen_dir = '/lec_new_added_core/'
# cv_ratio = 4
# gen_dict = {}
# for filename in os.listdir(source_dir):
#     f = os.path.join(source_dir, filename)
    
#     # checking if it is a file
#     if os.path.isfile(f) and filename[-3:] == 'cnf' and os.path.isfile(f[:-4] + '_core'):
#         try:
#             os.mkdir(home + 'PS_generated/' + filename[:-4])
#             os.mkdir(home+'PS_generated/' + filename[:-4] + '_core')
#         except:
#             print('directory', filename[:-4], 'already exists')
#         input_file = f
#         file = open(input_file)
#         content = file.readlines()
#         counter = 0
#         formula = []
#         num_vars = 0
#         num_clause = 0
#         while content[0].split()[0] == 'c':
#             content = content[1:]
#         while len(content[-1].split()) <= 1:
#             content = content[ :-1]
        
#         parameters = content[0].split()
#         print(parameters)
#         num_vars = int(parameters[2])
#         num_content_clause = int(parameters[3])
#         core_cnf = open(home + 'split_0/' + filename[:-4] + '_core')
#         core = core_cnf.readlines()
#         while core[0].split()[0] == 'c':
#             core = core[1:]
#         num_vars = int(core[0].split(' ')[2])
#         num_core_clause = int(core[0].split(' ')[3])
#         while core[0].split()[0] == 'p':
#             core = core[1:]
#         while len(content[-1].split()) <= 1:
#             core = core[:-1]

#         num_gen_clause = num_content_clause - num_core_clause
#         if num_gen_clause < 3000 and num_vars < 3000:
#             for i in range(5):
                
                
                
#                 os.system("cd /home/joseph-c/sat_gen/CoreDetection/neurosat/")
#                 os.system("/home/joseph-c/sat_gen/CoreDetection/ps-sat/ps-sat -s "+ str(1+i) + ' -m ' + str(abs(num_gen_clause)) + ' -n ' + str(num_vars) + ' -k 3 -b 0.5 -B 1 -T 1.3' + " > " + home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i)  + '.cnf')
                
#                 gen_dict[filename] = num_gen_clause
#                 ps_cnf = open(home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i) + '.cnf')
                
#                 content = ps_cnf.readlines()
#                 while content[0].split()[0] == 'c':
#                     content = content[1:]
#                 # num_vars = int(content[0].split(' ')[2])
#                 while content[0].split()[0] == 'p':
#                     content = content[1:]
#                 while len(content[-1].split()) <= 1:
#                     content = content[:-1]
#                 content = content + core
#                 out_file = home+ 'PS_generated/' +  filename[:-4] + '/' + str(i) +'_added_core' + '.cnf'
#                 with open(out_file, 'w') as out_file:
#                     out_file.write("c generated by me \n")
#                     out_file.write("p cnf {} {}\n".format(num_vars, len(content)))
#                     for clause in content:
#                         out_file.write(clause)
#                 out_core_file = home + 'PS_generated/' + filename[:-4] + '_core/'  + '/' + str(i) +'_added_core' + '.cnf'
#                 with open(out_core_file, 'w') as out_core_file:
#                     out_core_file.write("c generated by me \n")
#                     out_core_file.write("p cnf {} {}\n".format(num_vars, len(core)))
#                     for clause in core:
#                         out_core_file.write(clause)
#         else:
#             print(filename + ' is too big')
#             os.remove(f)
# import csv

# with open('/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/mp1/n_gen_clause'+ '.csv', 'w') as csv_file:  
#     writer = csv.writer(csv_file)
#     for key, value in gen_dict.items():
#         writer.writerow([key, value])

        
# os.system("cp -R " +  home+ 'PS_generated'  + " " + "/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/dataset/")
# os.system("cp -R " +  home+ 'PS_generated' + " " + "/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/formulas/")


# #Postprocessing

# import os

# #generate PS graphs
# home = '/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/src/dataset/'
# directory = '/lec_new_temp/'
# source_dir = '/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/src/dataset/5k_bigcore/split_0/'
# gen_dir = '/lec_new_added_core/'
# cv_ratio = 4
# gen_dict = {}
# args = []
# for filename in os.listdir(source_dir):
#     f = os.path.join(source_dir, filename)
    
#     # checking if it is a file
#     if os.path.isfile(f) and filename[-3:] == 'cnf' and os.path.isfile(f[:-4] + '_core'):
#         try:
#             os.mkdir(home + 'PS_generated/' + filename[:-4])
#             os.mkdir(home+'PS_generated/' + filename[:-4] + '_core')
#         except:
#             print('directory', filename[:-4], 'already exists')
#         input_file = f
#         file = open(input_file)
#         content = file.readlines()
#         counter = 0
#         formula = []
#         num_vars = 0
#         num_clause = 0
#         while content[0].split()[0] == 'c':
#             content = content[1:]
#         while len(content[-1].split()) <= 1:
#             content = content[ :-1]
        
#         parameters = content[0].split()
#         print(parameters)
#         num_vars = int(parameters[2])
#         num_content_clause = int(parameters[3])
#         core_cnf = open(source_dir + filename[:-4] + '_core')
#         core = core_cnf.readlines()
#         while core[0].split()[0] == 'c':
#             core = core[1:]
#         num_vars = int(core[0].split(' ')[2])
#         num_core_clause = int(core[0].split(' ')[3])
#         while core[0].split()[0] == 'p':
#             core = core[1:]
#         while len(content[-1].split()) <= 1:
#             core = core[:-1]
#         num_gen_clause = num_content_clause - num_core_clause
#     else:
#         print(f)
# def process(args):
#     directory = args[0]
#     filename = args[1]
#     num_vars = args[2]
#     num_clause = args[3]
#     content = args[4]
#     core = args[5]
    
#     # if num_gen_clause and num_vars:
#     for i in range(4):
        
        
        
#         os.system("cd /home/joseph-c/sat_gen/CoreDetection/")
#         os.system("/home/joseph-c/sat_gen/CoreDetection/ps-sat/ps-sat -s "+ str(i+1) + ' -m ' + str(abs(num_gen_clause)) + ' -n ' + str(num_vars) + ' -k 3 -b 0.5 -B 1 -T 1.3' + " > " + home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i)  + '.cnf')
        
#         gen_dict[filename] = num_gen_clause
#         ps_cnf = open(home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i) + '.cnf')
        
#         content = ps_cnf.readlines()
#         while content[0].split()[0] == 'c':
#             content = content[1:]
#         # num_vars = int(content[0].split(' ')[2])
#         while content[0].split()[0] == 'p':
#             content = content[1:]
#         while len(content[-1].split()) <= 1:
#             content = content[:-1]
#         content = content + core
#         out_file = home+ 'PS_generated/' +  filename[:-4] + '/' + str(i) +'_added_core' + '.cnf'
#         with open(out_file, 'w') as out_file:
#             out_file.write("c generated by me \n")
#             out_file.write("p cnf {} {}\n".format(num_vars, len(content)))
#             for clause in content:
#                 out_file.write(clause)
#         out_core_file = home + 'PS_generated/' + filename[:-4] + '_core/'  + '/' + str(i) +'_added_core' + '.cnf'
#         with open(out_core_file, 'w') as out_core_file:
#             out_core_file.write("c generated by me \n")
#             out_core_file.write("p cnf {} {}\n".format(num_vars, len(core)))
#             for clause in core:
#                 out_core_file.write(clause)
    
        
# import csv
# from multiprocessing import Pool
# pool = Pool(100)
# #print(len(paths))
# pool.map(process, args)

# pool.close()
# pool.join()




# with open('/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/src/dataset/unsat_acs/n_gen_clause'+ '.csv', 'w') as csv_file:  
#     writer = csv.writer(csv_file)
#     for key, value in gen_dict.items():
#         writer.writerow([key, value])

        
# os.system("cp -R " +  home+ 'PS_generated'  + " " + "/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/dataset/")
# os.system("cp -R " +  home+ 'PS_generated' + " " + "/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/formulas/")


# #Postprocessing

import os

#generate PS graphs
home = '/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/'
directory = '/lec_new_temp/'
source_dir = '/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/mp1_c35_bail/'
gen_dir = '/lec_new_added_core/'
seed_start = 1
cv_ratio = 4
gen_dict = {}
skipped_files = 0
import time

start = time.time()
for filename in os.listdir(source_dir):
    f = os.path.join(source_dir, filename)
    
    # checking if it is a file
    if os.path.isfile(f) and filename[-3:] == 'cnf' and os.path.isfile(f[:-4] + '_core'):
        
        input_file = f
        file = open(input_file)
        content = file.readlines()
        counter = 0
        formula = []
        num_vars = 0
        num_clause = 0
        while content[0].split()[0] == 'c':
            content = content[1:]
        while len(content[-1].split()) <= 1:
            content = content[ :-1]
        
        parameters = content[0].split()
        print(parameters)
        num_vars = int(parameters[2])
        num_content_clause = int(parameters[3])
        core_cnf = open(home + '/mp1_c35_bail/' + filename[:-4] + '_core')
        core = core_cnf.readlines()
        while core[0].split()[0] == 'c':
            core = core[1:]
        num_vars = int(core[0].split(' ')[2])
        num_core_clause = int(core[0].split(' ')[3])
        while core[0].split()[0] == 'p':
            core = core[1:]
        while len(content[-1].split()) <= 1:
            core = core[:-1]

        num_gen_clause = num_content_clause - num_core_clause
        if num_content_clause == num_core_clause:
            continue
        try:
            os.mkdir(home + 'PS_generated/' + filename[:-4])
            os.mkdir(home+'PS_generated/' + filename[:-4] + '_core')
        except:
            print('directory',home + 'PS_generated/' + filename[:-4], 'already exists')
            continue
        # if num_gen_clause < 15000 and num_vars < 15000 and num_content_clause < 15000:
        if 1 > 0:
            for i in range(seed_start, seed_start + 5):
                
                
                
                os.system("cd /home/joseph-c/sat_gen/CoreDetection/neurosat/")
                os.system("/home/joseph-c/sat_gen/CoreDetection/ps-sat/ps-sat -s "+ str(1+i) + ' -m ' + str(abs(num_gen_clause)) + ' -n ' + str(num_vars) + ' -k 3 -b 0.5 -B 1 -T 1.3' + " > " + home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i)  + '.cnf')
                
                gen_dict[filename] = num_gen_clause
                ps_cnf = open(home+ 'PS_generated' + directory + filename[:-4] + '_' + str(i) + '.cnf')
                
                content = ps_cnf.readlines()
                while content[0].split()[0] == 'c':
                    content = content[1:]
                # num_vars = int(content[0].split(' ')[2])
                while content[0].split()[0] == 'p':
                    content = content[1:]
                while len(content[-1].split()) <= 1:
                    content = content[:-1]
                content = content + core
                out_file = home+ 'PS_generated/' +  filename[:-4] + '/' + str(i) +'_added_core' + '.cnf'
                with open(out_file, 'w') as out_file:
                    out_file.write("c generated by me \n")
                    out_file.write("p cnf {} {}\n".format(num_vars, len(content)))
                    for clause in content:
                        out_file.write(clause)
                out_core_file = home + 'PS_generated/' + filename[:-4] + '_core/'  + '/' + str(i) +'_added_core' + '.cnf'
                with open(out_core_file, 'w') as out_core_file:
                    out_core_file.write("c generated by me \n")
                    out_core_file.write("p cnf {} {}\n".format(num_vars, len(core)))
                    for clause in core:
                        out_core_file.write(clause)
        else:
            print(filename + ' is too big')
            skipped_files += 1
            # os.remove(f)
import csv
print(skipped_files)
with open('/home/joseph-c/sat_gen/CoreDetection/neurosat/HardPSGEN/src/dataset/tseitin_formulas_nt/n_gen_clause'+ '.csv', 'w') as csv_file:  
    writer = csv.writer(csv_file)
    for key, value in gen_dict.items():
        writer.writerow([key, value])

        
# os.system("cp -R " +  home+ 'PS_generated'  + " " + "/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/dataset/")
# os.system("cp -R " +  home+ 'PS_generated' + " " + "/home/joseph-c/sat_gen/CoreDetection/HardPSGEN/formulas/")

print('time to ps-gen:', time.time() - start)
#Postprocessing